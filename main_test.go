package main

import (
	"testing"
)

var binaryStrings = []string{}

func BenchmarkFindMaxFormMemoization(b *testing.B) {
	for i := 0; i < b.N; i++ {
		FindMaxFormMemoization(binaryStrings, 30, 30)
	}
}

func BenchmarkFindMaxFormTabulation(b *testing.B) {
	for i := 0; i < b.N; i++ {
		FindMaxFormTabulation(binaryStrings, 30, 30)
	}
}
